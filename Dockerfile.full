# syntax=docker/dockerfile:1.0.0-experimental

FROM clojure:temurin-8-lein AS setup

ARG CDN_HOST
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_ACCESS_KEY_ID

ENV JAR_FILENAME=storefront.jar
ENV STANDALONE_JAR=/app/target/storefront-*-standalone.jar
ENV TARGET=/app/target
ENV JAR_PATH=$TARGET/storefront.jar
ENV NODE_VERSION=16.x
ENV INSTALL_NODE_FILE=install-node.sh

RUN apt-get update;

RUN curl -sL https://deb.nodesource.com/setup_$NODE_VERSION | bash -
RUN apt-get install -qqy openssh-client zip unzip curl git nodejs;


RUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts


############# BEGIN LEIN CLEAN #####################
FROM setup AS lein_clean

ARG CDN_HOST
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_ACCESS_KEY_ID

ENV JAR_FILENAME=storefront.jar
ENV STANDALONE_JAR=/app/target/storefront-*-standalone.jar
ENV TARGET=/app/target
ENV JAR_PATH=$TARGET/storefront.jar
ENV NODE_VERSION=16.x
ENV INSTALL_NODE_FILE=install-node.sh

WORKDIR /app

ADD project.clj project.clj
ADD . .

############# BEGIN LEIN DEPS #####################
FROM lein_clean AS lein_deps

ARG CDN_HOST
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_ACCESS_KEY_ID

ENV JAR_FILENAME=storefront.jar
ENV STANDALONE_JAR=/app/target/storefront-*-standalone.jar
ENV TARGET=/app/target
ENV JAR_PATH=$TARGET/storefront.jar
ENV NODE_VERSION=16.x
ENV INSTALL_NODE_FILE=install-node.sh


RUN npm install && (which gulp || npm install -g gulp)

############# BEGIN ASSET BUILD #####################

ENV JAR_FILENAME=storefront.jar
ENV STANDALONE_JAR=/app/target/storefront-*-standalone.jar
ENV TARGET=/app/target
ENV JAR_PATH=$TARGET/storefront.jar
ENV NODE_VERSION=16.x
ENV INSTALL_NODE_FILE=install-node.sh


ARG GIT_SHA

RUN gulp compile-assets --host $CDN_HOST --sha $GIT_SHA

############# BEGIN CLOJURE UBERJAR BUILD #####################
FROM lein_deps AS builder

ENV JAR_FILENAME=storefront.jar
ENV STANDALONE_JAR=/app/target/storefront-*-standalone.jar
ENV TARGET=/app/target
ENV JAR_PATH=$TARGET/storefront.jar
ENV NODE_VERSION=16.x
ENV INSTALL_NODE_FILE=install-node.sh

ARG AWS_SECRET_ACCESS_KEY
ARG AWS_ACCESS_KEY_ID

RUN lein deps
RUN lein uberjar

RUN mv $STANDALONE_JAR $JAR_PATH

############# BEGIN ASSET  #####################
FROM amazon/aws-cli AS asset_uploader

COPY --from=builder /app/resources/public/cdn /resources/public/cdn

ARG AWS_SECRET_ACCESS_KEY
ARG AWS_ACCESS_KEY_ID
ARG ASSETS_S3_BUCKET

RUN aws configure set default.max_concurrent_requests 25

RUN aws s3 sync /resources/public/cdn \
                s3://$ASSETS_S3_BUCKET/cdn \
                --debug \
                --acl public-read \
                --content-encoding gzip \
                --cache-control "max-age=315360000" \
                --expires $(date --iso-8601 -d "$now + 10 years")

RUN touch .asset-upload-done

############# BEGIN POST-BUILD #####################
FROM amazoncorretto:8 AS runner

ENV JAR_FILENAME=storefront.jar
ENV STANDALONE_JAR=/app/target/storefront-*-standalone.jar
ENV TARGET=/app/target
ENV JAR_PATH=$TARGET/storefront.jar
ENV NODE_VERSION=16.x
ENV INSTALL_NODE_FILE=install-node.sh

RUN echo $JAR_PATH $JAR_FILENAME
RUN echo $JAR_PATH $JAR_FILENAME
RUN echo $JAR_PATH $JAR_FILENAME
RUN echo $JAR_PATH $JAR_FILENAME
COPY --from=builder $JAR_PATH /$JAR_FILENAME
COPY --from=builder /app/container_files /

# This is not necessary, except to tell docker tha the asset_uploader is actually needed and it should not optimize it out of existing.
COPY --from=asset_uploader /.asset-upload-done /

RUN curl -LO https://github.com/jmxtrans/jmxtrans-agent/releases/download/jmxtrans-agent-1.2.4/jmxtrans-agent-1.2.4.jar

USER nobody
CMD exec java -javaagent:/jmxtrans-agent-1.2.4.jar=/jmxtrans-agent.xml -server -XX:-OmitStackTraceInFastThrow -Xmx1024m -XX:MaxMetaspaceSize=128m -Xss1m -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -jar $JAR_FILENAME